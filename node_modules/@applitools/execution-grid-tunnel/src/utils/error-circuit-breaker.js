class ErrorCircuitBreaker{
    constructor({threshold = 3, timeout = 10000, logger} = {}) {
        this._threshold = threshold
        this._timeout = timeout
        this._failureCount = 0
        this._logger = logger

        this.status = 'CLOSED'
        this.waitForClosedState = Promise.resolve()
    }

    incErrorCounter(){
        if (this.status === 'OPEN') return
        
        this._failureCount++
        
        if(this._failureCount <  this._threshold) return

        if (this._logger){
            this._logger.warn({
                action: 'circuit-breaker-was-opened',
                threshold: this._threshold
            })
        }

        this.status = 'OPEN'
        this.waitForClosedState = new Promise(r => setTimeout(() => {
            this.status = 'CLOSED'
            this._logger.info({
                action: 'circuit-breaker-was-closed',
                threshold: this._threshold
            })
            r()
        },this._timeout))

        this._failureCount = 0
    }

    resetErrorCounter(){
        this._failureCount = 0
    }
}

module.exports = {ErrorCircuitBreaker}