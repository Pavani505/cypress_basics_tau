const tls=require("tls"),net=require("net"),{KeepaliveMessageFilter:KeepaliveMessageFilter}=require("./keepalive-filter-message"),ATTACHING_REQUEST="attaching-request",CLOSING_CONNECTION="closing-connection";class TunnelConnection{constructor({keepAliveMessage:e,connectedMessage:n,logger:o,connectionId:t}){this._logger=o,this._filter=new KeepaliveMessageFilter({keepAliveMessage:e}),this._connectedMessage=n,this._filter.on("error",(e=>o.warn({action:"filter-error",error:e.stack||e.message}))),this._connectionId=t}connect({tunnelId:e,host:n,port:o,token:t,protocol:c="tcp",localProxyOptions:i}){return new Promise(((r,s)=>{let l=!1;this._logger.debug({action:"connection-info",connectionId:this._connectionId,port:o,host:n,token:t,protocol:c});const a="tcp"==c?net.connect(o,n):tls.connect(o,n);this._remoteConnection=a,a.once("connect",(()=>{a.write(JSON.stringify({tunnelId:e,token:t})),a.once("data",(n=>{const o=n.toString();if(o!==this._connectedMessage){this._logger.warn({action:"connection-refused",connectionId:this._connectionId,error:o});const e=new Error(`Server Error: ${o}`);return s(e)}this._localConnection=net.connect(i),this._localConnection.on("error",(e=>{this._logger.warn({action:"local-connection-error",connectionId:this._connectionId,error:e.stack||e.message})})),this._localConnection.once("connect",(()=>{this._localConnection.on("end",(()=>{this._logger.debug({action:"local-connection-end",connectionId:this._connectionId,tunnelId:e}),a.end()})),a.pipe(this._filter).pipe(this._localConnection).pipe(a),l=!0,r()}))}))})),a.on("error",(e=>{this._logger.warn({action:"remote-connection-error",connectionId:this._connectionId,error:e.stack||e.message}),l||s(new Error(`Connection Closed: ${e.message||"Unexpected"}`)),a.end()}))}))}waitForAttachingRequest(){return this._filter.waitForChunk().then((()=>ATTACHING_REQUEST))}waitForRemoteConnectionClosing(){return new Promise((e=>{this._remoteConnection.once("end",(()=>{e(CLOSING_CONNECTION)}))}))}end(){this._localConnection?.closed||this._localConnection.end(),this._remoteConnection.closed||this._remoteConnection.end()}destroy(){this._localConnection?.destroyed||this._localConnection.destroy(),this._remoteConnection.destroyed||this._remoteConnection.destroy()}}module.exports={TunnelConnection:TunnelConnection,ATTACHING_REQUEST:ATTACHING_REQUEST,CLOSING_CONNECTION:CLOSING_CONNECTION};