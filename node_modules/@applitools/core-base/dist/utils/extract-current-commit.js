"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractLatestCommitInfo = exports.cacheKey = void 0;
const utils = __importStar(require("@applitools/utils"));
const logger_1 = require("@applitools/logger");
exports.cacheKey = 'extract-current-commit';
exports.extractLatestCommitInfo = utils.general.cachify(extractCommitInfo, () => exports.cacheKey);
async function extractCommitInfo({ execOptions, logger = (0, logger_1.makeLogger)(), }) {
    let result;
    try {
        result = await executeWithLog('git log -1 --format="%aI %H"', { execOptions, logger });
        if (result.stderr) {
            logger.log(`Error during extracting commit information from git`, result.stderr);
        }
        else {
            const [timestamp, sha] = result.stdout.trim().split(' ');
            return { timestamp, sha };
        }
    }
    catch (err) {
        logger.log(`Error during parsing commit hash from git`, err, result === null || result === void 0 ? void 0 : result.stdout);
    }
}
async function executeWithLog(command, { execOptions, logger = (0, logger_1.makeLogger)() } = {
    execOptions: {},
    logger: (0, logger_1.makeLogger)(),
}) {
    logger.log(`executing command: ${command}`);
    const result = await utils.process.execute(command, execOptions);
    if (result.stderr && result.code)
        logger.log(`exit code: ${result.code}, stderr: ${result.stderr}`);
    return result;
}
