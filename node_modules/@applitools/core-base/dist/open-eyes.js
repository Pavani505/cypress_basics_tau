"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenEyes = void 0;
const abort_controller_1 = require("abort-controller");
const extract_branching_timestamp_1 = require("./utils/extract-branching-timestamp");
const extract_current_commit_1 = require("./utils/extract-current-commit");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const close_1 = require("./close");
const abort_1 = require("./abort");
const get_results_1 = require("./get-results");
const throat_1 = __importDefault(require("throat"));
const utils = __importStar(require("@applitools/utils"));
function makeOpenEyes({ requests, agentId: defaultAgentId, concurrency, cwd = process.cwd(), heartbeat, logger: mainLogger, }) {
    const throttle = concurrency ? (0, throat_1.default)(concurrency) : (fn) => fn();
    return async function openEyes({ settings, logger = mainLogger, }) {
        var _a, _b;
        logger = logger.extend(mainLogger, { tags: [`eyes-base-${utils.general.shortid()}`] });
        settings.latestCommitInfo = await (0, extract_current_commit_1.extractLatestCommitInfo)({ execOptions: { cwd }, logger });
        (_a = settings.processId) !== null && _a !== void 0 ? _a : (settings.processId = heartbeat.processId);
        if (settings.ignoreGitBranching) {
            settings.gitBranchingTimestamp = undefined;
        }
        else if (!settings.gitBranchingTimestamp) {
            let branchName = settings.branchName;
            let parentBranchName = settings.parentBranchName;
            try {
                if (!branchName && !parentBranchName && ((_b = settings.batch) === null || _b === void 0 ? void 0 : _b.id) && !settings.batch.id.startsWith('generated')) {
                    const branches = await requests.getBatchBranches({ settings: { ...settings, batchId: settings.batch.id } });
                    branchName = branches.branchName;
                    parentBranchName = branches.parentBranchName;
                }
                if (branchName && parentBranchName && branchName !== parentBranchName) {
                    settings.gitBranchingTimestamp = await (0, extract_branching_timestamp_1.extractBranchingTimestamp)({
                        branchName,
                        parentBranchName,
                        execOptions: { cwd },
                        logger,
                    });
                    logger.log('Branching timestamp successfully extracted', settings.gitBranchingTimestamp);
                }
            }
            catch (err) {
                logger.error('Error during extracting merge timestamp', err);
            }
        }
        settings.agentId = `${defaultAgentId} ${settings.agentId ? `[${settings.agentId}]` : ''}`.trim();
        logger.log('Command "openEyes" is called with settings', settings);
        return new Promise((resolve, reject) => {
            throttle(() => {
                return new Promise(async (done) => {
                    var _a;
                    try {
                        const controller = new abort_controller_1.AbortController();
                        const eyesRequests = await requests.openEyes({ settings, heartbeat, logger });
                        eyesRequests.test.ufgServer = {
                            ...eyesRequests.test.ufgServer,
                            ufgServerUrl: (_a = settings.ufgServerUrl) !== null && _a !== void 0 ? _a : eyesRequests.test.ufgServer.ufgServerUrl,
                        };
                        resolve(utils.general.extend(eyesRequests, {
                            check: (0, check_1.makeCheck)({ requests: eyesRequests, signal: controller.signal, logger }),
                            checkAndClose: (0, check_and_close_1.makeCheckAndClose)({ requests: eyesRequests, done, signal: controller.signal, logger }),
                            close: (0, close_1.makeClose)({ requests: eyesRequests, done, logger }),
                            abort: (0, abort_1.makeAbort)({ requests: eyesRequests, done, controller, logger }),
                            getResults: (0, get_results_1.makeGetResults)({ requests: eyesRequests, logger }),
                        }));
                    }
                    catch (error) {
                        reject(error);
                        done();
                    }
                });
            });
        });
    };
}
exports.makeOpenEyes = makeOpenEyes;
