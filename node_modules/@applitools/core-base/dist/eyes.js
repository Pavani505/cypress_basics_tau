"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeEyes = void 0;
const abort_controller_1 = require("abort-controller");
const logger_1 = require("@applitools/logger");
const requests_1 = require("./server/requests");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const close_1 = require("./close");
const abort_1 = require("./abort");
const get_results_1 = require("./get-results");
const utils = __importStar(require("@applitools/utils"));
function makeEyes({ test, logger: defaultLogger }) {
    const logger = (0, logger_1.makeLogger)({ logger: defaultLogger, format: { label: 'restored-eyes-base' } });
    logger.log(`Eyes instance is going to be restored for test`, test);
    const coreRequests = (0, requests_1.makeCoreRequestsWithCache)({ logger });
    const eyesRequests = (0, requests_1.makeEyesRequests)({ core: coreRequests, test, logger });
    const controller = new abort_controller_1.AbortController();
    const done = () => undefined;
    return utils.general.extend(eyesRequests, {
        check: (0, check_1.makeCheck)({ requests: eyesRequests, signal: controller.signal, logger }),
        checkAndClose: (0, check_and_close_1.makeCheckAndClose)({ requests: eyesRequests, done, signal: controller.signal, logger }),
        close: (0, close_1.makeClose)({ requests: eyesRequests, done, logger }),
        abort: (0, abort_1.makeAbort)({ requests: eyesRequests, done, controller, logger }),
        getResults: (0, get_results_1.makeGetResults)({ requests: eyesRequests, logger }),
    });
}
exports.makeEyes = makeEyes;
