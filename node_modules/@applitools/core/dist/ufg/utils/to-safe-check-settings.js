"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toSafeCheckSettings = void 0;
const utils = __importStar(require("@applitools/utils"));
const regionTypes = ['ignore', 'layout', 'strict', 'content', 'floating', 'accessibility'];
function toSafeCheckSettings({ settings }) {
    const calculate = regionTypes.flatMap(regionType => {
        var _a;
        return ((_a = settings[`${regionType}Regions`]) !== null && _a !== void 0 ? _a : []).reduce((regions, reference) => {
            const { region } = utils.types.has(reference, 'region') ? reference : { region: reference };
            return !isRegion(region) ? regions.concat(region) : regions;
        }, []);
    });
    const target = !isRegion(settings.region) ? settings.region : undefined;
    const scrolling = settings.scrollRootElement;
    return { elementReferences: { target, scrolling, calculate }, getSafeCheckSettings };
    function getSafeCheckSettings({ selectors, }) {
        const transformedSettings = { ...settings };
        regionTypes.forEach(regionType => {
            var _a;
            if (!transformedSettings[`${regionType}Regions`])
                return;
            transformedSettings[`${regionType}Regions`] = (_a = transformedSettings[`${regionType}Regions`]) === null || _a === void 0 ? void 0 : _a.flatMap(reference => {
                const { region, ...options } = utils.types.has(reference, 'region') ? reference : { region: reference };
                if (isRegion(region))
                    return reference;
                const { originalSelector, safeSelector } = selectors.calculate.shift();
                if (!safeSelector)
                    return [];
                return {
                    region: safeSelector,
                    regionId: utils.types.isString(originalSelector) ? originalSelector : originalSelector === null || originalSelector === void 0 ? void 0 : originalSelector.selector,
                    ...options,
                };
            });
        });
        if (!isRegion(transformedSettings.region))
            transformedSettings.region = selectors.target;
        transformedSettings.scrollRootElement = selectors.scrolling;
        return transformedSettings;
    }
    function isRegion(region) {
        return utils.types.has(region, ['x', 'y', 'width', 'height']);
    }
}
exports.toSafeCheckSettings = toSafeCheckSettings;
