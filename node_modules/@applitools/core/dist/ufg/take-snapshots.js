"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeTakeSnapshots = void 0;
const driver_1 = require("@applitools/driver");
const take_dom_snapshots_1 = require("./utils/take-dom-snapshots");
const to_safe_check_settings_1 = require("./utils/to-safe-check-settings");
const to_generated_selectors_1 = require("./utils/to-generated-selectors");
const uniquify_environments_1 = require("../automation/utils/uniquify-environments");
const abort_error_1 = require("../errors/abort-error");
const utils = __importStar(require("@applitools/utils"));
function makeTakeSnapshots({ core, spec, signal, logger: mainLogger }) {
    return async function takeSnapshots({ target, settings = {}, environments: defaultEnvironments = [], account, logger = mainLogger, }) {
        var _a, _b;
        logger = logger.extend(mainLogger);
        logger.log('Command "takeSnapshots" is called with settings', settings);
        if (signal === null || signal === void 0 ? void 0 : signal.aborted) {
            logger.warn('Command "takeSnapshots" was called after test was already aborted');
            throw new abort_error_1.AbortError('Command "takeSnapshots" was called after test was already aborted');
        }
        const uniqueEnvironments = (0, uniquify_environments_1.uniquifyEnvironments)((_a = settings.environments) !== null && _a !== void 0 ? _a : defaultEnvironments);
        const ufgClient = await core.getUFGClient({
            settings: {
                ...account.ufgServer,
                eyesServerUrl: account.eyesServer.eyesServerUrl,
                apiKey: account.eyesServer.apiKey,
            },
            logger,
        });
        const driver = spec && target ? await (0, driver_1.makeDriver)({ spec, driver: target, logger }) : null;
        if (!driver)
            throw new Error('Cannot create check snapshot without a driver');
        const environment = await driver.getEnvironment();
        const currentContext = driver.currentContext;
        await currentContext.setScrollingElement((_b = settings.scrollRootElement) !== null && _b !== void 0 ? _b : null);
        const { elementReferences, getSafeCheckSettings } = (0, to_safe_check_settings_1.toSafeCheckSettings)({ settings });
        const { elementReferencesToMark, getGeneratedSelectors } = (0, to_generated_selectors_1.toGeneratedSelectors)({
            elementReferences,
            transformElementReference: elementReference => { var _a; return ((0, driver_1.isSelector)(elementReference) && ((_a = spec === null || spec === void 0 ? void 0 : spec.toSimpleCommonSelector) === null || _a === void 0 ? void 0 : _a.call(spec, elementReference))) || undefined; },
        });
        let snapshots;
        if (environment.isWeb) {
            snapshots = await (0, take_dom_snapshots_1.takeDomSnapshots)({
                driver,
                settings: {
                    waitBeforeCapture: settings.waitBeforeCapture,
                    disableBrowserFetching: settings.disableBrowserFetching,
                    layoutBreakpoints: settings.layoutBreakpoints,
                    environments: uniqueEnvironments,
                    skipResources: ufgClient.getCachedResourceUrls(),
                    lazyLoad: settings.lazyLoad,
                    elementReferences: elementReferencesToMark,
                },
                provides: {
                    getChromeEmulationDevices: ufgClient.getChromeEmulationDevices,
                    getIOSDevices: ufgClient.getIOSDevices,
                },
                logger,
            });
        }
        else {
            const nmlClient = await core.getNMLClient({
                driver,
                settings: { ...account.eyesServer, supportedEnvironmentsUrl: account.supportedEnvironmentsUrl },
                logger,
            });
            snapshots = await nmlClient.takeSnapshots({
                settings: {
                    ...account.eyesServer,
                    waitBeforeCapture: settings.waitBeforeCapture,
                    environments: uniqueEnvironments,
                },
                logger,
            });
        }
        await currentContext.focus();
        const url = await driver.getUrl();
        const title = await driver.getTitle();
        const userAgent = environment.isWeb ? await driver.getUserAgentLegacy() : undefined;
        return snapshots.map((snapshot, index) => ({
            target: snapshot,
            settings: getSafeCheckSettings({
                selectors: getGeneratedSelectors(utils.types.has(snapshot, 'generatedSelectors') ? snapshot.generatedSelectors : undefined),
            }),
            environment: uniqueEnvironments[index],
            account,
            url,
            title,
            userAgent,
        }));
    };
}
exports.makeTakeSnapshots = makeTakeSnapshots;
