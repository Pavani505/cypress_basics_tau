"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeStartRenders = void 0;
const to_base_check_settings_1 = require("../automation/utils/to-base-check-settings");
function makeStartRenders({ core, logger: defaultLogger }) {
    return async function startRenders({ targets, logger = defaultLogger, }) {
        const clients = await targets.reduce(async (promise, target) => {
            const ufgClient = await core.getUFGClient({
                settings: {
                    ...target.account.ufgServer,
                    eyesServerUrl: target.account.eyesServer.eyesServerUrl,
                    apiKey: target.account.eyesServer.apiKey,
                },
                logger,
            });
            return promise.then(clients => {
                const targets = clients.get(ufgClient);
                if (targets) {
                    targets.push(target);
                }
                else {
                    clients.set(ufgClient, [target]);
                }
                return clients;
            });
        }, Promise.resolve(new Map()));
        const renders = await Promise.all(Array.from(clients.entries(), async ([ufgClient, targets]) => {
            const [renders, ...environments] = await Promise.all([
                ufgClient.startRenders({
                    renders: targets.map(target => {
                        var _a;
                        const { elementReferences: selectors } = (0, to_base_check_settings_1.toBaseCheckSettings)({ settings: target.settings });
                        return {
                            target: target.target,
                            settings: {
                                ...target.settings,
                                region: (_a = selectors.target) !== null && _a !== void 0 ? _a : target.settings.region,
                                scrollRootElement: selectors.scrolling,
                                selectorsToCalculate: selectors.calculate,
                                includeFullPageSize: Boolean(target.settings.pageId),
                                environment: target.environment,
                                uploadUrl: target.account.uploadUrl,
                                stitchingServiceUrl: target.account.stitchingServiceUrl,
                            },
                        };
                    }),
                    logger,
                }),
                ...targets.map(async (target) => {
                    const environment = await ufgClient.getActualEnvironment({
                        settings: { environment: target.environment },
                        logger,
                    });
                    return { ...environment, properties: target.environment.properties };
                }),
            ]);
            return renders.map((render, index) => ({
                render,
                settings: targets[index].settings,
                environment: environments[index],
                account: targets[index].account,
            }));
        }));
        return renders.flat();
    };
}
exports.makeStartRenders = makeStartRenders;
