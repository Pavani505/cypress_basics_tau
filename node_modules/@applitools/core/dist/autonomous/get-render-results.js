"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeGetRenderResults = void 0;
const to_base_check_settings_1 = require("../automation/utils/to-base-check-settings");
function makeGetRenderResults({ core, logger: defaultLogger }) {
    return async function getRenderResults({ renders, logger = defaultLogger, }) {
        const clients = await renders.reduce(async (promise, render) => {
            const ufgClient = await core.getUFGClient({
                settings: {
                    ...render.account.ufgServer,
                    eyesServerUrl: render.account.eyesServer.eyesServerUrl,
                    apiKey: render.account.eyesServer.apiKey,
                },
                logger,
            });
            return promise.then(clients => {
                const targets = clients.get(ufgClient);
                if (targets) {
                    targets.push(render);
                }
                else {
                    clients.set(ufgClient, [render]);
                }
                return clients;
            });
        }, Promise.resolve(new Map()));
        const results = await Promise.all(Array.from(clients.entries(), async ([ufgClient, renders]) => {
            const results = await ufgClient.getRenderResults({ renders: renders.map(render => render.render), logger });
            return results.map(({ selectorRegions, renderId, status, error, ...baseTarget }, index) => {
                const { elementReferences: selectors, getBaseCheckSettings } = (0, to_base_check_settings_1.toBaseCheckSettings)({
                    settings: renders[index].settings,
                });
                const baseSettings = getBaseCheckSettings({
                    calculatedRegions: selectors.calculate.map((_, index) => {
                        var _a;
                        return ({
                            regions: (_a = selectorRegions === null || selectorRegions === void 0 ? void 0 : selectorRegions[index]) !== null && _a !== void 0 ? _a : [],
                        });
                    }),
                });
                baseSettings.renderId = renderId;
                return {
                    status,
                    error,
                    target: { ...baseTarget, isTransformed: true },
                    settings: baseSettings,
                    environment: renders[index].environment,
                    account: renders[index].account,
                };
            });
        }));
        return results.flat();
    };
}
exports.makeGetRenderResults = makeGetRenderResults;
