import type { Eyes as BaseEyes, ImageTarget as BaseImageTarget, OpenSettings as BaseOpenSettings, CheckSettings as BaseCheckSettings } from '@applitools/core-base/types';
import type * as UFGCore from '../ufg/types';
import { type Logger } from '@applitools/logger';
import { type SpecType } from '@applitools/driver';
import { type RenderTarget as UFGRenderTarget, type StartedRender as UFGStartedRender } from '@applitools/ufg-client';
export * from '../ufg/types';
export interface AutonomousCore<TSpec extends SpecType> {
    readonly type: 'autonomous';
    takeSnapshots?(options: {
        target: UFGCore.DriverTarget<TSpec>;
        settings?: Partial<SnapshotSettings<TSpec>>;
        logger?: Logger;
    }): Promise<UFGCore.Snapshot[]>;
    createRenderTarget(options: {
        snapshot: UFGCore.Snapshot;
        logger?: Logger;
    }): Promise<RenderTarget>;
    startRenders(options: {
        targets: RenderTarget[];
        logger?: Logger;
    }): Promise<StartedRender[]>;
    getRenderResults(options: {
        renders: StartedRender[];
        logger?: Logger;
    }): Promise<RenderResult[]>;
    createRenderResults(options: {
        renders: StartedRender[];
        rawResults: any[];
        logger?: Logger;
    }): Promise<RenderResult[]>;
    openEyes(options: {
        settings: Partial<OpenSettings>;
        logger?: Logger;
    }): Promise<BaseEyes>;
}
export type SnapshotSettings<TSpec extends SpecType> = UFGCore.SnapshotSettings<TSpec> & UFGCore.EyesServerSettings;
export type RenderTarget = {
    target: UFGRenderTarget;
    settings: UFGCore.SafeCheckSettings;
    environment: UFGCore.RenderEnvironment;
    account: UFGCore.Account;
};
export type StartedRender = {
    render: UFGStartedRender;
    settings: UFGCore.SafeCheckSettings;
    environment: UFGCore.ExactEnvironment;
    account: UFGCore.Account;
};
export type RenderResult = {
    status: 'rendering' | 'rendered' | 'error';
    error: string;
    target: BaseImageTarget;
    settings: BaseCheckSettings;
    environment: UFGCore.ExactEnvironment;
    account: UFGCore.Account;
};
export type OpenSettings = BaseOpenSettings;
