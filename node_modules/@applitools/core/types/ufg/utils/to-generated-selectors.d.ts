import { type SpecType, type ElementReference } from '@applitools/driver';
import { type Selector as UFGSelector } from '@applitools/ufg-client';
export declare function toGeneratedSelectors<TSpec extends SpecType>({ elementReferences, transformElementReference, }: {
    elementReferences: {
        target?: ElementReference<TSpec>;
        scrolling?: ElementReference<TSpec>;
        calculate?: ElementReference<TSpec>[];
    };
    transformElementReference: (elementReference: ElementReference<TSpec>) => UFGSelector | undefined;
}): {
    elementReferencesToMark: (string | TSpec["element"] | TSpec["secondary"]["element"] | TSpec["selector"] | TSpec["secondary"]["selector"] | {
        selector: string | TSpec["selector"] | TSpec["secondary"]["selector"];
        type?: string | undefined;
        child?: TSpec["selector"] | TSpec["secondary"]["selector"] | import("@applitools/driver").CommonSelector<TSpec["selector"] | TSpec["secondary"]["selector"]> | undefined;
        shadow?: TSpec["selector"] | TSpec["secondary"]["selector"] | import("@applitools/driver").CommonSelector<TSpec["selector"] | TSpec["secondary"]["selector"]> | undefined;
        frame?: TSpec["selector"] | TSpec["secondary"]["selector"] | import("@applitools/driver").CommonSelector<TSpec["selector"] | TSpec["secondary"]["selector"]> | undefined;
        fallback?: TSpec["selector"] | TSpec["secondary"]["selector"] | import("@applitools/driver").CommonSelector<TSpec["selector"] | TSpec["secondary"]["selector"]> | undefined;
    } | (NonNullable<TSpec["element"]> extends infer T ? T extends NonNullable<TSpec["element"]> ? T extends readonly (infer InnerArr)[] ? InnerArr : T : never : never) | (NonNullable<TSpec["secondary"]["element"]> extends infer T_1 ? T_1 extends NonNullable<TSpec["secondary"]["element"]> ? T_1 extends readonly (infer InnerArr)[] ? InnerArr : T_1 : never : never) | (NonNullable<TSpec["selector"]> extends infer T_2 ? T_2 extends NonNullable<TSpec["selector"]> ? T_2 extends readonly (infer InnerArr)[] ? InnerArr : T_2 : never : never) | (NonNullable<TSpec["secondary"]["selector"]> extends infer T_3 ? T_3 extends NonNullable<TSpec["secondary"]["selector"]> ? T_3 extends readonly (infer InnerArr)[] ? InnerArr : T_3 : never : never))[];
    getGeneratedSelectors: (generatedSelectors?: {
        originalSelector: UFGSelector | null;
        safeSelector: UFGSelector | null;
    }[]) => {
        target: UFGSelector | undefined;
        scrolling: UFGSelector | undefined;
        calculate: {
            originalSelector: UFGSelector | null;
            safeSelector: UFGSelector | null;
        }[];
    };
};
